<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.WPF</name>
    </assembly>
    <members>
        <member name="T:ReactiveUI.ActivationForViewFetcher">
            <summary>
            ActiveationForViewFetcher is how ReactiveUI determine when a
            View is activated or deactivated. This is usually only used when porting
            ReactiveUI to a new UI framework.
            </summary>
        </member>
        <member name="M:ReactiveUI.ActivationForViewFetcher.GetAffinityForView(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.ActivationForViewFetcher.GetActivationForView(ReactiveUI.IActivatable)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.AutoSuspendHelper">
            <summary>
            Class for helping with Auto Suspending.
            Auto Suspender helpers will assist with saving out the application state
            when the application closes or activates.
            </summary>
        </member>
        <member name="M:ReactiveUI.AutoSuspendHelper.#ctor(System.Windows.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.AutoSuspendHelper"/> class.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="P:ReactiveUI.AutoSuspendHelper.IdleTimeout">
            <summary>
            Gets or sets the time out before the Auto Suspension happens.
            </summary>
        </member>
        <member name="T:ReactiveUI.DependencyObjectObservableForProperty">
            <summary>
            Creates a observable for a property if available that is based on a DependencyProperty.
            </summary>
        </member>
        <member name="M:ReactiveUI.DependencyObjectObservableForProperty.GetAffinityForObject(System.Type,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.DependencyObjectObservableForProperty.GetNotificationForProperty(System.Object,System.Linq.Expressions.Expression,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.ReactiveWindow`1">
            <summary>
            A <see cref="T:System.Windows.Window"/> that is reactive.
            </summary>
            <remarks>
            <para>
            This class is a <see cref="T:System.Windows.Window"/> that is also reactive. That is, it implements <see cref="T:ReactiveUI.IViewFor`1"/>.
            You can extend this class to get an implementation of <see cref="T:ReactiveUI.IViewFor`1"/> rather than writing one yourself.
            </para>
            <para>
            Note that the XAML for your control must specify the same base class, including the generic argument you provide for your view
            model. To do this, use the <c>TypeArguments</c> attribute as follows:
            <code>
            <![CDATA[
            <rxui:ReactiveWindow
                    x:Class="Foo.Bar.Views.YourView"
                    x:TypeArguments="vms:YourViewModel"
                    xmlns:rxui="http://reactiveui.net"
                    xmlns:vms="clr-namespace:Foo.Bar.ViewModels"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    mc:Ignorable="d">
                <!-- view XAML here -->
            </rxui:ReactiveWindow>
            ]]>
            </code>
            </para>
            </remarks>
            <typeparam name="TViewModel">
            The type of the view model backing the view.
            </typeparam>
        </member>
        <member name="F:ReactiveUI.ReactiveWindow`1.ViewModelProperty">
            <summary>
            The view model dependency property.
            </summary>
        </member>
        <member name="P:ReactiveUI.ReactiveWindow`1.BindingRoot">
            <summary>
            Gets the binding root view model.
            </summary>
        </member>
        <member name="P:ReactiveUI.ReactiveWindow`1.ViewModel">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.ReactiveWindow`1.ReactiveUI#IViewFor#ViewModel">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.Wpf.Registrations">
            <summary>
            Registrations specific to the WPF platform.
            </summary>
        </member>
        <member name="M:ReactiveUI.Wpf.Registrations.Register(System.Action{System.Func{System.Object},System.Type})">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.TransitioningContentControl">
            <summary>
            A ContentControl that animates the transition when its content is changed.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:ReactiveUI.TransitioningContentControl.Transition"/> property.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionPartProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:ReactiveUI.TransitioningContentControl.TransitionPart"/> property.
            </summary>
        </member>
        <member name="M:ReactiveUI.TransitioningContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.TransitioningContentControl"/> class.
            </summary>
        </member>
        <member name="E:ReactiveUI.TransitioningContentControl.TransitionCompleted">
            <summary>
            Occurs when a transition has completed.
            </summary>
        </member>
        <member name="E:ReactiveUI.TransitioningContentControl.TransitionStarted">
            <summary>
            Occurs when a transition has started.
            </summary>
        </member>
        <member name="T:ReactiveUI.TransitioningContentControl.TransitionType">
            <summary>
            Represents the type of transition that a TransitioningContentControl will perform.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionType.Fade">
            <summary>
            A simple fading transition.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionType.FadeDown">
            <summary>
            A transition that fades the new element in from the top.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionType.SlideLeft">
            <summary>
            A transition that slides old content left and out of view, then slides new content back in from the same direction.
            </summary>
        </member>
        <member name="T:ReactiveUI.TransitioningContentControl.TransitionPartType">
            <summary>
            Represents the part of the transition that the developer would like the TransitioningContentControl to perform.
            </summary>
            <remarks>This only applies to certain TransitionTypes. An InvalidOperationException will be thrown if the TransitionType does not support the TransitionPartType. Default is OutIn.</remarks>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionPartType.Out">
            <summary>
            Transitions out only.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionPartType.In">
            <summary>
            Transitions in only.
            </summary>
        </member>
        <member name="F:ReactiveUI.TransitioningContentControl.TransitionPartType.OutIn">
            <summary>
            Transitions in and out.
            </summary>
        </member>
        <member name="P:ReactiveUI.TransitioningContentControl.Transition">
            <summary>
            Gets or sets the transition.
            </summary>
            <value>The transition.</value>
        </member>
        <member name="P:ReactiveUI.TransitioningContentControl.TransitionPart">
            <summary>
            Gets or sets the transition part.
            </summary>
            <value>The transition part.</value>
        </member>
        <member name="M:ReactiveUI.TransitioningContentControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.TransitioningContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
        </member>
        <member name="M:ReactiveUI.TransitioningContentControl.AbortTransition">
            <summary>
            Aborts the transition.
            </summary>
        </member>
        <member name="M:ReactiveUI.TransitioningContentControl.SetTransitionDefaultValues">
            <summary>
            Sets default values for certain transition types.
            </summary>
        </member>
        <member name="T:ReactiveUI.AutoDataTemplateBindingHook">
            <summary>
            AutoDataTemplateBindingHook is a binding hook that checks ItemsControls
            that don't have DataTemplates, and assigns a default DataTemplate that
            loads the View associated with each ViewModel.
            </summary>
        </member>
        <member name="P:ReactiveUI.AutoDataTemplateBindingHook.DefaultItemTemplate">
            <summary>
            Gets the default item template.
            </summary>
        </member>
        <member name="M:ReactiveUI.AutoDataTemplateBindingHook.ExecuteHook(System.Object,System.Object,System.Func{ReactiveUI.IObservedChange{System.Object,System.Object}[]},System.Func{ReactiveUI.IObservedChange{System.Object,System.Object}[]},ReactiveUI.BindingDirection)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.BooleanToVisibilityHint">
            <summary>
            Enum that hints at the visibility of a ui element.
            </summary>
        </member>
        <member name="F:ReactiveUI.BooleanToVisibilityHint.None">
            <summary>
            Do not modify the boolean type conversion from it's default action of using the Visibility.Collapsed.
            </summary>
        </member>
        <member name="F:ReactiveUI.BooleanToVisibilityHint.Inverse">
            <summary>
            Inverse the action of the boolean type conversion, when it's true collapse the visibility.
            </summary>
        </member>
        <member name="F:ReactiveUI.BooleanToVisibilityHint.UseHidden">
            <summary>
            Use the hidden version rather than the Collapsed.
            </summary>
        </member>
        <member name="T:ReactiveUI.BooleanToVisibilityTypeConverter">
            <summary>
            This type convert converts between Boolean and XAML Visibility - the
            conversionHint is a BooleanToVisibilityHint.
            </summary>
        </member>
        <member name="M:ReactiveUI.BooleanToVisibilityTypeConverter.GetAffinityForObjects(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.BooleanToVisibilityTypeConverter.TryConvert(System.Object,System.Type,System.Object,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.PlatformOperations">
            <summary>
            Returns the current orientation of the device on Windows.
            </summary>
        </member>
        <member name="M:ReactiveUI.PlatformOperations.GetOrientation">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.ReactiveUserControl`1">
             <summary>
             A <see cref="T:System.Windows.Controls.UserControl"/> that is reactive.
             </summary>
             <remarks>
             <para>
             This class is a <see cref="T:System.Windows.Controls.UserControl"/> that is also reactive. That is, it implements <see cref="T:ReactiveUI.IViewFor`1"/>.
             You can extend this class to get an implementation of <see cref="T:ReactiveUI.IViewFor`1"/> rather than writing one yourself.
             </para>
             <para>
             Note that the XAML for your control must specify the same base class, including the generic argument you provide for your view
             model. To do this, use the <c>TypeArguments</c> attribute as follows:
             <code>
             <![CDATA[
             <rxui:ReactiveUserControl
                     x:Class="Foo.Bar.Views.YourView"
                     x:TypeArguments="vms:YourViewModel"
                     xmlns:rxui="http://reactiveui.net"
                     xmlns:vms="clr-namespace:Foo.Bar.ViewModels"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     mc:Ignorable="d">
                 <!-- view XAML here -->
             </rxui:ReactiveUserControl>
             ]]>
             </code>
             </para>
             <para>
             Note that UWP projects do not support the <c>TypeArguments</c> attribute. The XAML designer window in WPF projects also does not
             support generic types. To use <see cref="T:ReactiveUI.ReactiveUserControl`1"/> in XAML documents you need to create a base class
             where you derive from <see cref="T:ReactiveUI.ReactiveUserControl`1"/> with the type argument filled in.
             <code>
             <![CDATA[
             internal class YourViewBase : ReactiveUserControl<YourViewModel> { /* No code needed here */ }
            
             public partial class YourView : YourViewBase
             {
                 /* Your code */
             }
             ]]>
             </code>
             Then you can use this base class as root in your XAML document.
             <code>
             <![CDATA[
             <views:YourViewBase
                     x:Class="Foo.Bar.Views.YourView"
                     xmlns:rxui="http://reactiveui.net"
                     xmlns:vms="clr-namespace:Foo.Bar.ViewModels"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     mc:Ignorable="d">
                 <!-- view XAML here -->
             </views:YourViewBase>
             ]]>
             </code>
             </para>
             </remarks>
             <typeparam name="TViewModel">
             The type of the view model backing the view.
             </typeparam>
        </member>
        <member name="F:ReactiveUI.ReactiveUserControl`1.ViewModelProperty">
            <summary>
            The view model dependency property.
            </summary>
        </member>
        <member name="P:ReactiveUI.ReactiveUserControl`1.BindingRoot">
            <summary>
            Gets the binding root view model.
            </summary>
        </member>
        <member name="P:ReactiveUI.ReactiveUserControl`1.ViewModel">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.ReactiveUserControl`1.ReactiveUI#IViewFor#ViewModel">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.RoutedViewHost">
            <summary>
            This control hosts the View associated with a Router, and will display
            the View and wire up the ViewModel whenever a new ViewModel is
            navigated to. Put this control as the only control in your Window.
            </summary>
        </member>
        <member name="F:ReactiveUI.RoutedViewHost.RouterProperty">
            <summary>
            The router dependency property.
            </summary>
        </member>
        <member name="F:ReactiveUI.RoutedViewHost.DefaultContentProperty">
            <summary>
            The default content property.
            </summary>
        </member>
        <member name="F:ReactiveUI.RoutedViewHost.ViewContractObservableProperty">
            <summary>
            The view contract observable property.
            </summary>
        </member>
        <member name="M:ReactiveUI.RoutedViewHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.RoutedViewHost"/> class.
            </summary>
        </member>
        <member name="P:ReactiveUI.RoutedViewHost.Router">
            <summary>
            Gets or sets the <see cref="T:ReactiveUI.RoutingState"/> of the view model stack.
            </summary>
        </member>
        <member name="P:ReactiveUI.RoutedViewHost.DefaultContent">
            <summary>
            Gets or sets the content displayed whenever there is no page currently
            routed.
            </summary>
        </member>
        <member name="P:ReactiveUI.RoutedViewHost.ViewContractObservable">
            <summary>
            Gets or sets the view contract observable.
            </summary>
            <value>
            The view contract observable.
            </value>
        </member>
        <member name="P:ReactiveUI.RoutedViewHost.ViewLocator">
            <summary>
            Gets or sets the view locator.
            </summary>
            <value>
            The view locator.
            </value>
        </member>
        <member name="T:ReactiveUI.ViewModelViewHost">
            <summary>
            This content control will automatically load the View associated with
            the ViewModel property and display it. This control is very useful
            inside a DataTemplate to display the View associated with a ViewModel.
            </summary>
        </member>
        <member name="F:ReactiveUI.ViewModelViewHost.DefaultContentProperty">
            <summary>
            The default content dependency property.
            </summary>
        </member>
        <member name="F:ReactiveUI.ViewModelViewHost.ViewModelProperty">
            <summary>
            The view model dependency property.
            </summary>
        </member>
        <member name="F:ReactiveUI.ViewModelViewHost.ViewContractObservableProperty">
            <summary>
            The view contract observable dependency property.
            </summary>
        </member>
        <member name="M:ReactiveUI.ViewModelViewHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.ViewModelViewHost"/> class.
            </summary>
        </member>
        <member name="P:ReactiveUI.ViewModelViewHost.ViewContractObservable">
            <summary>
            Gets or sets the view contract observable.
            </summary>
        </member>
        <member name="P:ReactiveUI.ViewModelViewHost.DefaultContent">
            <summary>
            Gets or sets the content displayed by default when no content is set.
            </summary>
        </member>
        <member name="P:ReactiveUI.ViewModelViewHost.ViewModel">
            <summary>
            Gets or sets the ViewModel to display.
            </summary>
        </member>
        <member name="P:ReactiveUI.ViewModelViewHost.ViewContract">
            <summary>
            Gets or sets the view contract.
            </summary>
        </member>
        <member name="P:ReactiveUI.ViewModelViewHost.ViewLocator">
            <summary>
            Gets or sets the view locator.
            </summary>
        </member>
        <member name="M:ReactiveUI.ViewModelViewHost.Dispose">
            <inheritdoc />
        </member>
        <member name="M:ReactiveUI.ViewModelViewHost.Dispose(System.Boolean)">
            <summary>
            Disposes of resources inside the class.
            </summary>
            <param name="isDisposing">If we are disposing managed resources.</param>
        </member>
    </members>
</doc>
